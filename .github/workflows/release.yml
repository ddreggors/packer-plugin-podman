# This GitHub action can publish assets for release when a tag is created.
# Currently its setup to run on any tag that matches the pattern "v*" (ie. v0.1.0).
#
name: Build and Release
on:
  push:
    tags:
      - 'v*'
  workflow_call:
    secrets:
      PASSPHRASE:
        description: 'A GPG Key passphrase passed from the caller workflow'
        required: false
      FINGERPRINT:
        description: 'A GPG Key fingerprint passed from the caller workflow'
        required: false
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'warning'
      tags:
        description: 'Test scenario tags'
jobs:
  get-go-version:
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.get-go-version.outputs.go-version }}
    steps:
      - uses: actions/checkout@v4
      - name: 'Determine Go version.'
        id: get-go-version
        run: |
          echo "Found Go $(cat .go-version)"
          echo "go-version=$(cat .go-version)" >> $GITHUB_OUTPUT
  goreleaser:
    needs:
      - get-go-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Git Fetch
        run: git fetch --prune
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.get-go-version.outputs.go-version }}
      - name: Describe plugin
        id: plugin_describe
        run: echo "::set-output name=api_version::$(go run . describe | jq -r '.api_version')"
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          # either 'goreleaser' (default) or 'goreleaser-pro'
          distribution: goreleaser
          # 'latest', 'nightly', or a semver (Example: ~> v2)
          version: '~> v2'
          args: release --clean
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          API_VERSION: ${{ steps.plugin_describe.outputs.api_version }}
